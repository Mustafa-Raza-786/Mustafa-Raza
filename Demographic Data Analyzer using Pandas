import pandas as pd

def calculate_demographic_data(print_data=True):
    df = pd.read_csv('adult.data.csv')

    race_count = df['race'].value_counts()

    average_age_men = round(df[df['sex'] == 'Male']['age'].mean(), 1)

    percentage_bachelors = round(
        (df['education'] == 'Bachelors').sum() / len(df) * 100, 1)

    advanced_education = df['education'].isin(['Bachelors', 'Masters', 'Doctorate'])
    higher_edu = df[advanced_education]
    lower_edu = df[~advanced_education]

    higher_edu_rich = round(
        (higher_edu['salary'] == '>50K').sum() / len(higher_edu) * 100, 1)

    lower_edu_rich = round(
        (lower_edu['salary'] == '>50K').sum() / len(lower_edu) * 100, 1)

    min_work_hours = df['hours-per-week'].min()

    num_min_workers = df[df['hours-per-week'] == min_work_hours]
    rich_min_workers = num_min_workers[num_min_workers['salary'] == '>50K']
    rich_percentage = round(len(rich_min_workers) / len(num_min_workers) * 100, 1)

    country_rich_pct = df[df['salary'] == '>50K']['native-country'].value_counts(normalize=True) * 100
    highest_earning_country = country_rich_pct.idxmax()
    highest_earning_country_percentage = round(country_rich_pct.max(), 1)

    top_IN_occupation = df[
        (df['native-country'] == 'India') & (df['salary'] == '>50K')
    ]['occupation'].value_counts().idxmax()

    if print_data:
        print("Race distribution:\n", race_count)
        print("Average age of men:", average_age_men)
        print("Percentage with Bachelors degrees:", percentage_bachelors)
        print("Higher education rich %:", higher_edu_rich)
        print("Lower education rich %:", lower_edu_rich)
        print("Min work hours:", min_work_hours)
        print("Rich among min workers %:", rich_percentage)
        print("Top country for >50K:", highest_earning_country, highest_earning_country_percentage)
        print("Top job in India >50K:", top_IN_occupation)

    return {
        'race_count': race_count,
        'average_age_men': average_age_men,
        'percentage_bachelors': percentage_bachelors,
        'higher_education_rich': higher_edu_rich,
        'lower_education_rich': lower_edu_rich,
        'min_work_hours': min_work_hours,
        'rich_percentage': rich_percentage,
        'highest_earning_country': highest_earning_country,
        'highest_earning_country_percentage': highest_earning_country_percentage,
        'top_IN_occupation': top_IN_occupation
    }
calculate_demographic_data()
